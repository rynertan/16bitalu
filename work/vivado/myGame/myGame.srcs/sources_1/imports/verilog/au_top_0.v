/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_1 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_2 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [5-1:0] M_alu_button;
  reg [6-1:0] M_alu_alufn_signal;
  alufsm_3 alu (
    .clk(clk),
    .rst(rst),
    .a(M_alu_a),
    .b(M_alu_b),
    .button(M_alu_button),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .zvn(M_alu_zvn)
  );
  
  wire [16-1:0] M_autotest_out;
  wire [3-1:0] M_autotest_zvn;
  reg [1-1:0] M_autotest_io_button;
  reg [16-1:0] M_autotest_a;
  reg [16-1:0] M_autotest_b;
  reg [6-1:0] M_autotest_alufn_signal;
  auto_test_4 autotest (
    .clk(clk),
    .rst(rst),
    .io_button(M_autotest_io_button),
    .a(M_autotest_a),
    .b(M_autotest_b),
    .alufn_signal(M_autotest_alufn_signal),
    .out(M_autotest_out),
    .zvn(M_autotest_zvn)
  );
  
  
  localparam START_tester = 2'd0;
  localparam MANUAL_tester = 2'd1;
  localparam AUTO_tester = 2'd2;
  
  reg [1:0] M_tester_d, M_tester_q = START_tester;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_tester_d = M_tester_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_alu_a[0+7-:8] = io_dip[0+7-:8];
    M_alu_a[8+7-:8] = io_dip[8+7-:8];
    M_alu_b[0+7-:8] = io_dip[0+7-:8];
    M_alu_b[8+7-:8] = io_dip[8+7-:8];
    M_alu_alufn_signal = io_dip[16+0+5-:6];
    M_buttoncond_in = io_button;
    M_buttondetector_in = M_buttoncond_out;
    M_alu_button[1+0-:1] = M_buttondetector_out[1+0-:1];
    M_alu_button[4+0-:1] = M_buttondetector_out[4+0-:1];
    M_autotest_io_button = M_buttondetector_out[0+0-:1];
    M_autotest_a = io_dip[0+7-:8];
    M_autotest_b = io_dip[8+7-:8];
    M_autotest_alufn_signal = io_dip[16+0+5-:6];
    
    case (M_tester_q)
      START_tester: begin
        io_led[0+7-:8] = 1'h1;
        io_led[8+7-:8] = 1'h1;
        io_led[16+7-:8] = 1'h1;
        if (M_buttondetector_out[2+0-:1]) begin
          M_tester_d = MANUAL_tester;
        end
      end
      MANUAL_tester: begin
        io_led[0+7-:8] = M_alu_out[0+7-:8];
        io_led[8+7-:8] = M_alu_out[8+7-:8];
        io_led[16+5+2-:3] = M_alu_zvn;
        if (M_buttondetector_out[2+0-:1]) begin
          M_tester_d = AUTO_tester;
        end
      end
      AUTO_tester: begin
        io_led[8+7-:8] = M_autotest_out[0+7-:8];
        io_led[16+7-:8] = M_autotest_out[8+7-:8];
        if (M_buttondetector_out[2+0-:1]) begin
          M_tester_d = START_tester;
        end
      end
    endcase
    io_led[16+0+4-:5] = io_button;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tester_q <= 1'h0;
    end else begin
      M_tester_q <= M_tester_d;
    end
  end
  
endmodule
