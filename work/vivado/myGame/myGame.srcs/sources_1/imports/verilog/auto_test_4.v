/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_test_4 (
    input clk,
    input rst,
    input [0:0] io_button,
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam ADD2_state = 5'd2;
  localparam ADD3_state = 5'd3;
  localparam SUB_state = 5'd4;
  localparam SUB_NEG_state = 5'd5;
  localparam AND_state = 5'd6;
  localparam OR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam A_state = 5'd9;
  localparam SHL_state = 5'd10;
  localparam SHR_state = 5'd11;
  localparam SRA_state = 5'd12;
  localparam CMPEQ_state = 5'd13;
  localparam CMPLT_state = 5'd14;
  localparam CMPLE_state = 5'd15;
  localparam MULT_state = 5'd16;
  localparam DIV_state = 5'd17;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  
  wire [16-1:0] M_alu_unit_out;
  wire [3-1:0] M_alu_unit_zvn;
  reg [16-1:0] M_alu_unit_a;
  reg [16-1:0] M_alu_unit_b;
  reg [6-1:0] M_alu_unit_alufn_signal;
  alu_7 alu_unit (
    .a(M_alu_unit_a),
    .b(M_alu_unit_b),
    .alufn_signal(M_alu_unit_alufn_signal),
    .out(M_alu_unit_out),
    .zvn(M_alu_unit_zvn)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_alu_unit_alufn_signal = 6'h00;
    M_alu_unit_alufn_signal = alufn_signal;
    M_alu_unit_a = a;
    M_alu_unit_b = b;
    out = M_alu_unit_out;
    zvn = M_alu_unit_zvn;
    M_alu_unit_a = 16'h0000;
    M_alu_unit_b = 16'h0000;
    
    case (M_state_q)
      START_state: begin
        if (io_button) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_unit_alufn_signal = 6'h00;
        M_alu_unit_a = 16'h0000;
        M_alu_unit_b = 16'h0001;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = ADD2_state;
        end
      end
      ADD2_state: begin
        M_alu_unit_alufn_signal = 6'h00;
        M_alu_unit_a = 16'hffff;
        M_alu_unit_b = 16'hffff;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = ADD3_state;
        end
      end
      ADD3_state: begin
        M_alu_unit_alufn_signal = 6'h00;
        M_alu_unit_a = 16'h0001;
        M_alu_unit_b = 16'h8000;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu_unit_alufn_signal = 6'h01;
        M_alu_unit_a = 16'h0b04;
        M_alu_unit_b = 16'h04b1;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = SUB_NEG_state;
        end
      end
      SUB_NEG_state: begin
        M_alu_unit_alufn_signal = 6'h01;
        M_alu_unit_a = 16'hfffb;
        M_alu_unit_b = 16'h0008;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        M_alu_unit_alufn_signal = 6'h08;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 16'hac08;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu_unit_alufn_signal = 6'h0a;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 16'hac08;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu_unit_alufn_signal = 6'h0b;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 16'hac08;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu_unit_alufn_signal = 6'h0c;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 16'hac08;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu_unit_alufn_signal = 6'h10;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 4'h1;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu_unit_alufn_signal = 6'h11;
        M_alu_unit_a = 16'h6857;
        M_alu_unit_b = 4'h1;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu_unit_alufn_signal = 6'h17;
        M_alu_unit_a = 16'hc861;
        M_alu_unit_b = 4'h1;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        M_alu_unit_alufn_signal = 6'h18;
        M_alu_unit_a = 16'h0000;
        M_alu_unit_b = 16'h0000;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        M_alu_unit_alufn_signal = 6'h19;
        M_alu_unit_a = 16'h7fff;
        M_alu_unit_b = 16'h8000;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        M_alu_unit_alufn_signal = 6'h18;
        M_alu_unit_a = 16'h0005;
        M_alu_unit_b = 16'h0004;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = MULT_state;
        end
      end
      MULT_state: begin
        M_alu_unit_alufn_signal = 6'h20;
        M_alu_unit_a = 16'h0003;
        M_alu_unit_b = 16'h0002;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = DIV_state;
        end
      end
      DIV_state: begin
        M_alu_unit_alufn_signal = 6'h27;
        M_alu_unit_a = 16'h0063;
        M_alu_unit_b = 16'h0003;
        out = M_alu_unit_out;
        zvn = M_alu_unit_zvn;
        if (io_button) begin
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
