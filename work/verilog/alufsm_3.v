/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alufsm_3 (
    input clk,
    input rst,
    input [15:0] a,
    input [15:0] b,
    input [4:0] button,
    input [5:0] alufn_signal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  reg [15:0] M_i_result_d, M_i_result_q = 1'h0;
  
  reg [15:0] M_j_result_d, M_j_result_q = 1'h0;
  
  reg [5:0] M_k_result_d, M_k_result_q = 1'h0;
  
  
  localparam ALUFN_input_controller = 2'd0;
  localparam A1_input_controller = 2'd1;
  localparam B1_input_controller = 2'd2;
  localparam RESET_input_controller = 2'd3;
  
  reg [1:0] M_input_controller_d, M_input_controller_q = ALUFN_input_controller;
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_7 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .zvn(M_alu_zvn)
  );
  
  always @* begin
    M_input_controller_d = M_input_controller_q;
    M_j_result_d = M_j_result_q;
    M_k_result_d = M_k_result_q;
    M_i_result_d = M_i_result_q;
    
    
    case (M_input_controller_q)
      ALUFN_input_controller: begin
        if (button[1+0-:1]) begin
          M_k_result_d = alufn_signal;
          M_input_controller_d = A1_input_controller;
        end else begin
          M_input_controller_d = ALUFN_input_controller;
        end
      end
      A1_input_controller: begin
        if (button[1+0-:1]) begin
          M_i_result_d = a;
          M_input_controller_d = B1_input_controller;
        end else begin
          M_input_controller_d = A1_input_controller;
        end
      end
      B1_input_controller: begin
        if (button[1+0-:1]) begin
          M_j_result_d = b;
          M_input_controller_d = RESET_input_controller;
        end else begin
          M_input_controller_d = B1_input_controller;
        end
      end
      RESET_input_controller: begin
        if (button[4+0-:1]) begin
          M_i_result_d = 16'h0000;
          M_j_result_d = 16'h0000;
          M_k_result_d = 6'h00;
          M_input_controller_d = ALUFN_input_controller;
        end else begin
          M_input_controller_d = RESET_input_controller;
        end
      end
    endcase
    M_alu_a = M_i_result_q;
    M_alu_b = M_j_result_q;
    M_alu_alufn_signal = M_k_result_q;
    out = M_alu_out;
    zvn = M_alu_zvn;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_k_result_q <= 1'h0;
    end else begin
      M_k_result_q <= M_k_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_i_result_q <= 1'h0;
    end else begin
      M_i_result_q <= M_i_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_j_result_q <= 1'h0;
    end else begin
      M_j_result_q <= M_j_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_input_controller_q <= 1'h0;
    end else begin
      M_input_controller_q <= M_input_controller_d;
    end
  end
  
endmodule
