module alu (
    input a[16],                 // input operand a, 16-bit width
    input b[16],                 // input operand b, 16-bit width
    input alufn_signal[6],       // input ALU function signal, 6-bit width
    output out[16],              // output result, 16-bit width
    output zvn[3]                // output zero, overflow, and negative flags, 3-bit width
  ) {
  
  // Instantiate adder, boolean, shifter, compare, and multiply units
  adder adderUnit;
  boolean booleanUnit;
  shifter shifterUnit;
  compare compareUnit; 
  multiply multiplyUnit;
  
  // Declare internal signals for zero, overflow, and negative flags
  sig z;
  sig v;
  sig n;

  
  
  always {
    
    adderUnit.alufn_signal = alufn_signal;
    adderUnit.a = a;
    adderUnit.b = b;
    
    z = adderUnit.z;
    v = adderUnit.v;
    n = adderUnit.n; 
    
    zvn[0] = z;
    zvn[1] = v;
    zvn[2] = n;
     
    
    compareUnit.alufn_signal= alufn_signal;
    compareUnit.z = z;
    compareUnit.v = v;
    compareUnit.n = n;
    
    booleanUnit.alufn_signal = alufn_signal;
    booleanUnit.a = a;
    booleanUnit.b = b;
    
    shifterUnit.alufn_signal = alufn_signal;
    shifterUnit.a = a;
    shifterUnit.b = b[3:0];
    
    multiplyUnit.alufn_signal = alufn_signal;
    multiplyUnit.a = a;
    multiplyUnit.b = b;
    
    case(alufn_signal[5:3]){
      b000 : out = adderUnit.out;
      b001 : out = booleanUnit.out;
      b010 : out = shifterUnit.out;
      b011 : out = compareUnit.out;
      b100 : out = multiplyUnit.out;
      default: out = 16b0;
    }
      
    //if (alufn_signal == b000010){
      //out = a*b; // fast multiplier hack
    //}
    
    
  }
}